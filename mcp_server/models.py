# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:30:27+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel


class ChangeType(Enum):
    IMMEDIATE = 'IMMEDIATE'
    REQUIRES_REBOOT = 'REQUIRES_REBOOT'


class ClusterAlreadyExistsFault(RootModel[Any]):
    root: Any


class ClusterEndpointEncryptionType(Enum):
    NONE = 'NONE'
    TLS = 'TLS'


class ClusterNotFoundFault(RootModel[Any]):
    root: Any


class ClusterQuotaForCustomerExceededFault(RootModel[Any]):
    root: Any


class InsufficientClusterCapacityFault(RootModel[Any]):
    root: Any


class Integer(RootModel[int]):
    root: int


class IntegerOptional(RootModel[int]):
    root: int


class InvalidARNFault(RootModel[Any]):
    root: Any


class InvalidClusterStateFault(RootModel[Any]):
    root: Any


class InvalidParameterCombinationException(RootModel[Any]):
    root: Any


class InvalidParameterGroupStateFault(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class InvalidSubnet(RootModel[Any]):
    root: Any


class InvalidVPCNetworkStateFault(RootModel[Any]):
    root: Any


class IsModifiable(Enum):
    TRUE = 'TRUE'
    FALSE = 'FALSE'
    CONDITIONAL = 'CONDITIONAL'


class NodeNotFoundFault(RootModel[Any]):
    root: Any


class NodeQuotaForClusterExceededFault(RootModel[Any]):
    root: Any


class NodeQuotaForCustomerExceededFault(RootModel[Any]):
    root: Any


class ParameterGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class ParameterGroupNotFoundFault(RootModel[Any]):
    root: Any


class ParameterGroupQuotaExceededFault(RootModel[Any]):
    root: Any


class ParameterType(Enum):
    DEFAULT = 'DEFAULT'
    NODE_TYPE_SPECIFIC = 'NODE_TYPE_SPECIFIC'


class SSEEnabled(RootModel[bool]):
    root: bool


class SSESpecification(BaseModel):
    Enabled: SSEEnabled


class SSEStatus(Enum):
    ENABLING = 'ENABLING'
    ENABLED = 'ENABLED'
    DISABLING = 'DISABLING'
    DISABLED = 'DISABLED'


class ServiceLinkedRoleNotFoundFault(RootModel[Any]):
    root: Any


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SourceType(Enum):
    CLUSTER = 'CLUSTER'
    PARAMETER_GROUP = 'PARAMETER_GROUP'
    SUBNET_GROUP = 'SUBNET_GROUP'


class String(RootModel[str]):
    root: str


class Subnet(BaseModel):
    SubnetAvailabilityZone: Optional[String] = None
    SubnetIdentifier: Optional[String] = None


class SubnetGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class SubnetGroupInUseFault(RootModel[Any]):
    root: Any


class SubnetGroupNameList(RootModel[List[String]]):
    root: List[String]


class SubnetGroupNotFoundFault(RootModel[Any]):
    root: Any


class SubnetGroupQuotaExceededFault(RootModel[Any]):
    root: Any


class SubnetIdentifierList(RootModel[List[String]]):
    root: List[String]


class SubnetInUse(RootModel[Any]):
    root: Any


class SubnetList(RootModel[List[Subnet]]):
    root: List[Subnet]


class SubnetQuotaExceededFault(RootModel[Any]):
    root: Any


class TStamp(RootModel[datetime]):
    root: datetime


class Tag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagNotFoundFault(RootModel[Any]):
    root: Any


class TagQuotaPerResourceExceeded(RootModel[Any]):
    root: Any


class TagResourceRequest(BaseModel):
    ResourceName: String
    Tags: TagList


class TagResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class UntagResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class UpdateSubnetGroupRequest(BaseModel):
    Description: Optional[String] = None
    SubnetGroupName: String
    SubnetIds: Optional[SubnetIdentifierList] = None


class XAmzTarget(Enum):
    AmazonDAXV3_CreateCluster = 'AmazonDAXV3.CreateCluster'


class XAmzTarget1(Enum):
    AmazonDAXV3_CreateParameterGroup = 'AmazonDAXV3.CreateParameterGroup'


class XAmzTarget2(Enum):
    AmazonDAXV3_CreateSubnetGroup = 'AmazonDAXV3.CreateSubnetGroup'


class XAmzTarget3(Enum):
    AmazonDAXV3_DecreaseReplicationFactor = 'AmazonDAXV3.DecreaseReplicationFactor'


class XAmzTarget4(Enum):
    AmazonDAXV3_DeleteCluster = 'AmazonDAXV3.DeleteCluster'


class XAmzTarget5(Enum):
    AmazonDAXV3_DeleteParameterGroup = 'AmazonDAXV3.DeleteParameterGroup'


class XAmzTarget6(Enum):
    AmazonDAXV3_DeleteSubnetGroup = 'AmazonDAXV3.DeleteSubnetGroup'


class XAmzTarget7(Enum):
    AmazonDAXV3_DescribeClusters = 'AmazonDAXV3.DescribeClusters'


class XAmzTarget8(Enum):
    AmazonDAXV3_DescribeDefaultParameters = 'AmazonDAXV3.DescribeDefaultParameters'


class XAmzTarget9(Enum):
    AmazonDAXV3_DescribeEvents = 'AmazonDAXV3.DescribeEvents'


class XAmzTarget10(Enum):
    AmazonDAXV3_DescribeParameterGroups = 'AmazonDAXV3.DescribeParameterGroups'


class XAmzTarget11(Enum):
    AmazonDAXV3_DescribeParameters = 'AmazonDAXV3.DescribeParameters'


class XAmzTarget12(Enum):
    AmazonDAXV3_DescribeSubnetGroups = 'AmazonDAXV3.DescribeSubnetGroups'


class XAmzTarget13(Enum):
    AmazonDAXV3_IncreaseReplicationFactor = 'AmazonDAXV3.IncreaseReplicationFactor'


class XAmzTarget14(Enum):
    AmazonDAXV3_ListTags = 'AmazonDAXV3.ListTags'


class XAmzTarget15(Enum):
    AmazonDAXV3_RebootNode = 'AmazonDAXV3.RebootNode'


class XAmzTarget16(Enum):
    AmazonDAXV3_TagResource = 'AmazonDAXV3.TagResource'


class XAmzTarget17(Enum):
    AmazonDAXV3_UntagResource = 'AmazonDAXV3.UntagResource'


class XAmzTarget18(Enum):
    AmazonDAXV3_UpdateCluster = 'AmazonDAXV3.UpdateCluster'


class XAmzTarget19(Enum):
    AmazonDAXV3_UpdateParameterGroup = 'AmazonDAXV3.UpdateParameterGroup'


class XAmzTarget20(Enum):
    AmazonDAXV3_UpdateSubnetGroup = 'AmazonDAXV3.UpdateSubnetGroup'


class AvailabilityZoneList(RootModel[List[String]]):
    root: List[String]


class ClusterNameList(RootModel[List[String]]):
    root: List[String]


class CreateParameterGroupRequest(BaseModel):
    Description: Optional[String] = None
    ParameterGroupName: String


class CreateSubnetGroupRequest(BaseModel):
    Description: Optional[String] = None
    SubnetGroupName: String
    SubnetIds: SubnetIdentifierList


class DeleteClusterRequest(BaseModel):
    ClusterName: String


class DeleteParameterGroupRequest(BaseModel):
    ParameterGroupName: String


class DeleteParameterGroupResponse(BaseModel):
    DeletionMessage: Optional[String] = None


class DeleteSubnetGroupRequest(BaseModel):
    SubnetGroupName: String


class DeleteSubnetGroupResponse(BaseModel):
    DeletionMessage: Optional[String] = None


class DescribeClustersRequest(BaseModel):
    ClusterNames: Optional[ClusterNameList] = None
    MaxResults: Optional[IntegerOptional] = None
    NextToken: Optional[String] = None


class DescribeDefaultParametersRequest(BaseModel):
    MaxResults: Optional[IntegerOptional] = None
    NextToken: Optional[String] = None


class DescribeEventsRequest(BaseModel):
    Duration: Optional[IntegerOptional] = None
    EndTime: Optional[TStamp] = None
    MaxResults: Optional[IntegerOptional] = None
    NextToken: Optional[String] = None
    SourceName: Optional[String] = None
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')
    StartTime: Optional[TStamp] = None


class DescribeParametersRequest(BaseModel):
    MaxResults: Optional[IntegerOptional] = None
    NextToken: Optional[String] = None
    ParameterGroupName: String
    Source: Optional[String] = None


class DescribeSubnetGroupsRequest(BaseModel):
    MaxResults: Optional[IntegerOptional] = None
    NextToken: Optional[String] = None
    SubnetGroupNames: Optional[SubnetGroupNameList] = None


class Endpoint(BaseModel):
    Address: Optional[String] = None
    Port: Optional[Integer] = None
    URL: Optional[String] = None


class Event(BaseModel):
    Date: Optional[TStamp] = None
    Message: Optional[String] = None
    SourceName: Optional[String] = None
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')


class EventList(RootModel[List[Event]]):
    root: List[Event]


class IncreaseReplicationFactorRequest(BaseModel):
    AvailabilityZones: Optional[AvailabilityZoneList] = None
    ClusterName: String
    NewReplicationFactor: Integer


class KeyList(RootModel[List[String]]):
    root: List[String]


class ListTagsRequest(BaseModel):
    NextToken: Optional[String] = None
    ResourceName: String


class ListTagsResponse(BaseModel):
    NextToken: Optional[String] = None
    Tags: Optional[TagList] = None


class Node(BaseModel):
    AvailabilityZone: Optional[String] = None
    Endpoint_1: Optional[Endpoint] = Field(None, alias='Endpoint')
    NodeCreateTime: Optional[TStamp] = None
    NodeId: Optional[String] = None
    NodeStatus: Optional[String] = None
    ParameterGroupStatus: Optional[String] = None


class NodeIdentifierList(RootModel[List[String]]):
    root: List[String]


class NodeList(RootModel[List[Node]]):
    root: List[Node]


class NodeTypeSpecificValue(BaseModel):
    NodeType: Optional[String] = None
    Value: Optional[String] = None


class NodeTypeSpecificValueList(RootModel[List[NodeTypeSpecificValue]]):
    root: List[NodeTypeSpecificValue]


class NotificationConfiguration(BaseModel):
    TopicArn: Optional[String] = None
    TopicStatus: Optional[String] = None


class Parameter(BaseModel):
    AllowedValues: Optional[String] = None
    ChangeType_1: Optional[ChangeType] = Field(None, alias='ChangeType')
    DataType: Optional[String] = None
    Description: Optional[String] = None
    IsModifiable_1: Optional[IsModifiable] = Field(None, alias='IsModifiable')
    NodeTypeSpecificValues: Optional[NodeTypeSpecificValueList] = None
    ParameterName: Optional[String] = None
    ParameterType_1: Optional[ParameterType] = Field(None, alias='ParameterType')
    ParameterValue: Optional[String] = None
    Source: Optional[String] = None


class ParameterGroup(BaseModel):
    Description: Optional[String] = None
    ParameterGroupName: Optional[String] = None


class ParameterGroupList(RootModel[List[ParameterGroup]]):
    root: List[ParameterGroup]


class ParameterGroupNameList(RootModel[List[String]]):
    root: List[String]


class ParameterGroupStatus(BaseModel):
    NodeIdsToReboot: Optional[NodeIdentifierList] = None
    ParameterApplyStatus: Optional[String] = None
    ParameterGroupName: Optional[String] = None


class ParameterList(RootModel[List[Parameter]]):
    root: List[Parameter]


class ParameterNameValue(BaseModel):
    ParameterName: Optional[String] = None
    ParameterValue: Optional[String] = None


class ParameterNameValueList(RootModel[List[ParameterNameValue]]):
    root: List[ParameterNameValue]


class RebootNodeRequest(BaseModel):
    ClusterName: String
    NodeId: String


class SSEDescription(BaseModel):
    Status: Optional[SSEStatus] = None


class SecurityGroupIdentifierList(RootModel[List[String]]):
    root: List[String]


class SecurityGroupMembership(BaseModel):
    SecurityGroupIdentifier: Optional[String] = None
    Status: Optional[String] = None


class SecurityGroupMembershipList(RootModel[List[SecurityGroupMembership]]):
    root: List[SecurityGroupMembership]


class SubnetGroup(BaseModel):
    Description: Optional[String] = None
    SubnetGroupName: Optional[String] = None
    Subnets: Optional[SubnetList] = None
    VpcId: Optional[String] = None


class SubnetGroupList(RootModel[List[SubnetGroup]]):
    root: List[SubnetGroup]


class UntagResourceRequest(BaseModel):
    ResourceName: String
    TagKeys: KeyList


class UpdateClusterRequest(BaseModel):
    ClusterName: String
    Description: Optional[String] = None
    NotificationTopicArn: Optional[String] = None
    NotificationTopicStatus: Optional[String] = None
    ParameterGroupName: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    SecurityGroupIds: Optional[SecurityGroupIdentifierList] = None


class UpdateParameterGroupRequest(BaseModel):
    ParameterGroupName: String
    ParameterNameValues: ParameterNameValueList


class UpdateParameterGroupResponse(BaseModel):
    ParameterGroup_1: Optional[ParameterGroup] = Field(None, alias='ParameterGroup')


class UpdateSubnetGroupResponse(BaseModel):
    SubnetGroup_1: Optional[SubnetGroup] = Field(None, alias='SubnetGroup')


class Cluster(BaseModel):
    ActiveNodes: Optional[IntegerOptional] = None
    ClusterArn: Optional[String] = None
    ClusterDiscoveryEndpoint: Optional[Endpoint] = None
    ClusterEndpointEncryptionType_1: Optional[ClusterEndpointEncryptionType] = Field(
        None, alias='ClusterEndpointEncryptionType'
    )
    ClusterName: Optional[String] = None
    Description: Optional[String] = None
    IamRoleArn: Optional[String] = None
    NodeIdsToRemove: Optional[NodeIdentifierList] = None
    NodeType: Optional[String] = None
    Nodes: Optional[NodeList] = None
    NotificationConfiguration_1: Optional[NotificationConfiguration] = Field(
        None, alias='NotificationConfiguration'
    )
    ParameterGroup: Optional[ParameterGroupStatus] = None
    PreferredMaintenanceWindow: Optional[String] = None
    SSEDescription_1: Optional[SSEDescription] = Field(None, alias='SSEDescription')
    SecurityGroups: Optional[SecurityGroupMembershipList] = None
    Status: Optional[String] = None
    SubnetGroup: Optional[String] = None
    TotalNodes: Optional[IntegerOptional] = None


class ClusterList(RootModel[List[Cluster]]):
    root: List[Cluster]


class CreateClusterRequest(BaseModel):
    AvailabilityZones: Optional[AvailabilityZoneList] = None
    ClusterEndpointEncryptionType_1: Optional[ClusterEndpointEncryptionType] = Field(
        None, alias='ClusterEndpointEncryptionType'
    )
    ClusterName: String
    Description: Optional[String] = None
    IamRoleArn: String
    NodeType: String
    NotificationTopicArn: Optional[String] = None
    ParameterGroupName: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    ReplicationFactor: Integer
    SSESpecification_1: Optional[SSESpecification] = Field(
        None, alias='SSESpecification'
    )
    SecurityGroupIds: Optional[SecurityGroupIdentifierList] = None
    SubnetGroupName: Optional[String] = None
    Tags: Optional[TagList] = None


class CreateClusterResponse(BaseModel):
    Cluster_1: Optional[Cluster] = Field(None, alias='Cluster')


class CreateParameterGroupResponse(BaseModel):
    ParameterGroup_1: Optional[ParameterGroup] = Field(None, alias='ParameterGroup')


class CreateSubnetGroupResponse(BaseModel):
    SubnetGroup_1: Optional[SubnetGroup] = Field(None, alias='SubnetGroup')


class DecreaseReplicationFactorRequest(BaseModel):
    AvailabilityZones: Optional[AvailabilityZoneList] = None
    ClusterName: String
    NewReplicationFactor: Integer
    NodeIdsToRemove: Optional[NodeIdentifierList] = None


class DecreaseReplicationFactorResponse(BaseModel):
    Cluster_1: Optional[Cluster] = Field(None, alias='Cluster')


class DeleteClusterResponse(BaseModel):
    Cluster_1: Optional[Cluster] = Field(None, alias='Cluster')


class DescribeClustersResponse(BaseModel):
    Clusters: Optional[ClusterList] = None
    NextToken: Optional[String] = None


class DescribeDefaultParametersResponse(BaseModel):
    NextToken: Optional[String] = None
    Parameters: Optional[ParameterList] = None


class DescribeEventsResponse(BaseModel):
    Events: Optional[EventList] = None
    NextToken: Optional[String] = None


class DescribeParameterGroupsRequest(BaseModel):
    MaxResults: Optional[IntegerOptional] = None
    NextToken: Optional[String] = None
    ParameterGroupNames: Optional[ParameterGroupNameList] = None


class DescribeParameterGroupsResponse(BaseModel):
    NextToken: Optional[String] = None
    ParameterGroups: Optional[ParameterGroupList] = None


class DescribeParametersResponse(BaseModel):
    NextToken: Optional[String] = None
    Parameters: Optional[ParameterList] = None


class DescribeSubnetGroupsResponse(BaseModel):
    NextToken: Optional[String] = None
    SubnetGroups: Optional[SubnetGroupList] = None


class IncreaseReplicationFactorResponse(BaseModel):
    Cluster_1: Optional[Cluster] = Field(None, alias='Cluster')


class RebootNodeResponse(BaseModel):
    Cluster_1: Optional[Cluster] = Field(None, alias='Cluster')


class UpdateClusterResponse(BaseModel):
    Cluster_1: Optional[Cluster] = Field(None, alias='Cluster')
